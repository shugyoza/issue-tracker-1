'use strict'
const express = require('express');
const csrf = require('csurf');
const { check, validationResult } = require('express-validator');
const Issue = require('../db/models/issue');
const router = express.Router();
const csrfProtection = csrf({ cookie: true });
const IssueHandler = require('../controllers/issue-handler.js')

let issueHandler = new IssueHandler();
const asyncHandler = (handler) => (req, res, next) => handler(req, res, next).catch(next);

// web address: root/issue
router.get('/', async (req, res, next) => {
    try {
        const issues = await Issue.find({});
        res.render('issue-list', { title: 'Issues', issues });
    } catch (err) {
        next(err);
    }
})

router.get('/add', csrfProtection, (req, res) => {
    const issue = new Issue({});
    res.render('issue-add', {
        title: 'Add Issue',
        issue,
        csrfToken: req.csrfToken()
    })
})

const issueValidators = [
    check('title')
    .exists({ checkFalsy: true })
    .withMessage('Please provide a value for Title.')
    .isLength({ max: 255 })
    .withMessage('Title must not be more than 255 characters long.'),
    check('remark')
    .exists({ checkFalsy: true })
    .withMessage('Please provide a value for Remark.')
    .isLength({ max: 500 })
    .withMessage('Remark must not be more than 500 characters long.'),
    check('creator')
    .exists({ checkFalsy: true })
    .withMessage('Please provide a value for Creator.')
    .isLength({ max: 255 })
]

router.post('/add', csrfProtection, issueValidators, asyncHandler(async(req, res) => {
    const {
        title,
        remark,
        creator,
        assignee,
        status
    } = req.body;

    const issue = new Issue({
        project: req.params.project,
        title: title,
        remark: remark,
        creator: creator,
        assignee: assignee,
        status: status,
        log: []
    });

    const validatorErrors = validationResult(req);

    if (validatorErrors.isEmpty()) {
        await issue.save();
        res.redirect('/');
    } else {
        const errors = validatorErrors.array().map((error) => error.msg);
        res.render('issue-add', {
            title: 'Add Issue',
            issue,
            errors,
            csrfToken: req.csrfToken()
        });
    }
}))

router.get('/find', csrfProtection, (req, res) => {
    const issue = new Issue({});
    res.render('issue-find', {
        title: 'Find Issue',
        issue,
        csrfToken: req.csrfToken()
    })
})

router.post('/find', csrfProtection, issueValidators, asyncHandler(async(req, res) => {
    const {
        project,
        title,
        remark,
        creator,
        assignee,
        status
    } = req.body;

    try {
        const issues = await Issue.find(req.body);
        res.render('issue-list', { title: 'Issues', issues });
    } catch (err) {
        next(err);
    }

}))


module.exports = router;
